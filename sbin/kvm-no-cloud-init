#!/bin/bash
# kvm/qemu guest configuration support via SMBIOS OEM strings...
# by Robert Socha, 2021
# Public Domain

set -eE

SSH_KEY_TYPES="rsa ed25519 ecdsa dsa"

_oem_string_count() {
  if LANG=C dmidecode --oem-string count 2>&1  | fgrep -q "unrecognized option"
  then
    dmidecode -t 11 -q | egrep -c 'String [0-9]+: '
  else
    dmidecode --oem-string count
  fi
}

_oem_string_get() {
local _number="$1"
  if LANG=C dmidecode --oem-string count 2>&1  | fgrep -q "unrecognized option"
  then
    dmidecode -t 11 -q | grep -oP "(?<=String ${_number}: ).+"
  else
    dmidecode --oem-string "${_number}"
  fi
}

_trap_error() {
local _frame=0 LINE SUB FILE
  while read LINE SUB FILE < <(caller "${_frame}")
  do
    if [[ ${_frame} -eq 0 ]]
    then
      printf "%s @ %s return code was %s\n" "${SUB}" "${LINE}" "$1" || true
    else
      printf "%-${_frame}s%s @ %s\n" "" "${SUB}" "${LINE}" || true
    fi
    ((_frame++)) || true
  done
}

_process_name() {
local _hostname="${1}"
  echo "Setting the hostname to: ${_hostname}"
  /usr/bin/hostnamectl set-hostname "${_hostname}"
  sed -i -e "s/template/${_hostname}/g" /etc/hosts || true
  if /bin/systemctl is-active --quiet rsyslog.service
  then
    echo "Restarting rsyslog.service..."
    /bin/systemctl reload-or-restart rsyslog.service
  fi
}

_process_ssh() {
local _ssh=$1 _user _key _u _home
  # user@key
  if [[ ${_ssh} =~ @ ]]
  then
    _user=${_ssh%%@*}
    _key=${_ssh##*@}
  else
    _user="root"
    _key="$_ssh"
  fi
  _key=$(echo -n "${_key}" | base64 -d)
  for _u in ${_user//,/ }
  do
    if getent passwd "${_u}" &>/dev/null
    then
      echo "Setting up ssh key for ${_u}"
      _home=$(eval echo ~${_u})
      if ! [[ -d ${_home}/.ssh ]]
      then
        echo "Creating ${_home}/.ssh directory"
        mkdir -p -m 0700 "${_home}/.ssh"
        chown "${_u}:${_u}" "${_home}/.ssh"
      fi
      echo "${_key}" >"${_home}/.ssh/authorized_keys"
      chmod 0600 "${_home}/.ssh/authorized_keys"
      chown "${_u}:${_u}" "${_home}/.ssh/authorized_keys"
    fi
  done
}

_process_user() {
local _user=$1 _pass
  # user[@password]
  _pass=""
  if [[ ${_user} =~ @ ]]
  then
    _pass=$(echo -n "${_user##*@}" | base64 -d)
    _user=${_user%%@*}
  fi
  if ! getent passwd "${_user}" &>/dev/null
  then
    useradd -m -s /bin/bash "${_user}"
  fi
  [[ -n ${_pass} ]] && echo -n "${_user}:${_pass}" | chpasswd --encrypted
}

_process_group() {
local _entry=$1 _user _group
  if [[ ${_entry} =~ @ ]]
  then
    _user=${_entry%%@*}
    _group=${_entry##*@}
    if getent group "${_group}" &>/dev/null
    then
      gpasswd -a "${_user}" "${_group}"
    fi
  fi
}

# well, Debian sucks? ;)
_make_sure_network_is_online() {
local _c=1
  while [[ -z "$(ip route show default)" ]] && [[ ${_c} -le 250 ]]
  do
    sleep 0.1
    ((_c++)) || true
  done
}

_http_get() {
local _url="${1}"
  _make_sure_network_is_online
  if command -v curl &>/dev/null
  then
    curl -m 3 -sf "${_url}"
  elif command -v wget &>/dev/null
  then
    wget -q -T 3 -O - "${_url}"
  else
    echo "no http client found - unable to register DNS name"
  fi
}

_process_dns_registry() {
local _url=$1 _me _resp _cnt=1
  _me="$(hostname)"
  while true
  do
    if _resp=$(_http_get "http://${_url}/${_me}")
    then
      echo "DNS: ${_resp}"
      break
    else
      if [[ ${_cnt} -gt 5 ]]
      then
        echo "DNS: registration failed"
        break
      else
        echo "DNS registration retry: ${_cnt}"
        ((_cnt++)) || true
        sleep 0.5
      fi
    fi
  done
}

_process_dns_un_registry() {
local _url=$1 _me _resp
  _me="-$(hostname)"
  if _resp=$(_http_get "http://${_url}/${_me}")
  then
    echo "DNS: ${_resp}"
  else
    echo "DNS: fail"
  fi
}

# Regenerate only existing keys
_regenerate_ssh_host_keys() {
local _key _type
  for _type in ${SSH_KEY_TYPES}
  do
    _key="/etc/ssh/ssh_host_${_type}_key"
    if [[ -f ${_key} ]]
    then
      if rm -f "${_key}" &>/dev/null
      then
        echo "Regenerating SSH host key ${_key} ..."
        ssh-keygen -q -f "${_key}" -N '' -t "${_type}"
      else
        echo "unable to regenerate the SSH host key ${_key}"
      fi
    fi
  done
}

# Generate all keys
_generate_ssh_host_keys() {
local _key _type
  for _type in ${SSH_KEY_TYPES}
  do
    _key="/etc/ssh/ssh_host_${_type}_key"
    if [[ -f ${_key} ]]
    then
      rm -f "${_key}" &>/dev/null
    fi
    echo "Generating SSH host key ${_key} ..."
    ssh-keygen -q -f "${_key}" -N '' -t "${_type}"
  done
}

# Regenerate only existing keys
_regenerate_ssh_host_keys() {
local _key _type
  for _type in ${SSH_KEY_TYPES}
  do
    _key="/etc/ssh/ssh_host_${_type}_key"
    if [[ -f ${_key} ]]
    then
      if rm -f "${_key}" &>/dev/null
      then
        echo "Regenerating SSH host key ${_key} ..."
        ssh-keygen -q -f "${_key}" -N '' -t "${_type}"
      else
        echo "unable to renegerate the SSH host key ${_key}"
      fi
    fi
  done
}

_process_config_start() {
local _in=$1 _data _d _var _v
  [[ -n ${_in} ]] || return 1
  IFS='!' read -r -a _data <<< "${_in}"
  for _d in ${_data[@]}
  do
    # requires r/w fs
    IFS=":" read -r _var _v <<< "${_d}"
    case ${_var} in
      name)
        if [[ -n "${_v}" ]]
        then
          _process_name "${_v}"
        fi
        ;;
      ssh)
        _process_ssh "${_v}"
        ;;
      user)
        _process_user "${_v}"
        ;;
      group)
        _process_group "${_v}"
        ;;
      dns-registry)
        _process_dns_registry "${_v}"
        ;;
      regenerate-ssh-host-keys)
        _regenerate_ssh_host_keys
        ;;
      generate-ssh-host-keys)
        _generate_ssh_host_keys
        ;;
    esac
  done
}

_process_config_stop() {
local _in=$1 _data _d _var _v
  [[ -n ${_in} ]] || return 1
  IFS='!' read -r -a _data <<< "${_in}"
  for _d in ${_data[@]}
  do
    # requires r/w fs
    IFS=":" read -r _var _v <<< "${_d}"
    case ${_var} in
      dns-registry)
        _process_dns_un_registry "${_v}"
        ;;
    esac
  done
}

_configure_instance() {
local _mode="$1" _count _string
  _check_deps
  if _oem_string_count &>/dev/null
  then
    _count=$(_oem_string_count)
    if [[ ${_count} =~ ^[0-9]+$ ]]
    then
      for _n in $(seq 1 ${_count})
      do
        _string=$(_oem_string_get ${_n})
        case "${_mode}" in
          no-network)
            if [[ ${_string} =~ ^kvm-cnf-no-net! ]]
            then
              _process_config_start "${_string:15}"
              systemctl disable kvm-no-cloud-init-no-network.service
              break
            fi
            ;;
          network)
            if [[ ${_string} =~ ^kvm-cnf-net! ]]
            then
              _process_config_start "${_string:12}"
              break
            fi
            ;;
        esac
      done
    fi
  fi
}

_deconfigure_instance() {
local _mode="$1" _count _string
  _check_deps
  if _oem_string_count &>/dev/null
  then
    _count=$(_oem_string_count)
    if [[ ${_count} =~ ^[0-9]+$ ]]
    then
      for _n in $(seq 1 ${_count})
      do
        _string=$(_oem_string_get ${_n})
        case "${_mode}" in
          network)
            if [[ ${_string} =~ ^kvm-cnf-net! ]]
            then
              _process_config_stop "${_string:12}"
              break
            fi
            ;;
        esac
      done
    fi
  fi
}

_check_deps() {
  if ! command -v dmidecode &>/dev/null
  then
    echo "error: missing dmidecode"
    exit 1
  fi
}

_main() {
local _action
  case "${1,,}" in
    start)
      shift
      case "${1,,}" in
        network)
          _configure_instance network
        ;;
        no-network)
          _configure_instance no-network
        ;;
      esac
      ;;
    stop)
      shift
      case "${1,,}" in
        network)
          _deconfigure_instance network
        ;;
      esac
      ;;
  esac
}

trap '_trap_error $?' ERR
_main "$@"
exit 0
# vim: set tabstop=2 shiftwidth=2 expandtab autoindent nosmartindent :
